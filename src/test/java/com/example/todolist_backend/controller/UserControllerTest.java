package com.example.todolist_backend.controller;

import com.example.todolist_backend.TodoListBackendApplication;
import com.example.todolist_backend.dto.UserLoginRequest;
import com.example.todolist_backend.dto.user.UserJoinRequest;
import com.example.todolist_backend.exception.AppException;
import com.example.todolist_backend.exception.ErrorCode;
import com.example.todolist_backend.service.ToDoService;
import com.example.todolist_backend.service.UserService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest // Ïª®Ìä∏Î°§Îü¨ÏôÄ Í¥ÄÎ†®Îêú ÎπàÎì§Îßå ÏÉùÏÑ±ÎêòÎ©∞, ÏÑúÎπÑÏä§ ÎπàÎì§ÏùÄ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÎäîÎã§. Ïù¥ Í≤ΩÏö∞, @MockBean ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ToDoService Ïùò ÎèôÏûëÏùÑ Î™®ÌÇπÌï¥ÏïºÌï® // Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùò Ïõπ Î†àÏù¥Ïñ¥ ÌÖåÏä§Ìä∏
class UserControllerTest {
    @Autowired
    MockMvc mockMvc;

    @MockBean // Mock Í∞ùÏ≤¥Î•º ÏÉùÏÑ±ÌïòÍ≥† ÎπàÏúºÎ°ú Îì±Î°ù // Í∞ÄÏßú(Mock) Í∞ùÏ≤¥ -> Ïã§Ï†ú Í∞ùÏ≤¥Ïùò ÎèôÏûëÏùÑ ÌùâÎÇ¥ÎÇ¥Í±∞ÎÇò, ÏãúÎÆ¨Î†àÏù¥ÏÖò, üåà ÌäπÏ†ïÎ©îÏÑúÎìú Ìò∏Ï∂ú Í∞ÄÎä•
    UserService userService;

    @Autowired
    ObjectMapper objectMapper; // Jackson ÎùºÏù¥Î∏åÎü¨Î¶¨ ObjectMapper Í∞ùÏ≤¥ // java object -> json object

    @Test
    @DisplayName("ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ")
    void join() throws Exception {
        // writeValueAsBytes : Java Í∞ùÏ≤¥Î•º JSON ÌòïÏãùÏùò Î∞îÏù¥Ìä∏ Î∞∞Ïó¥Î°ú ÏßÅÎ†¨Ìôî ( http ÌÜµÏã†ÏóêÏÑúÎäî ÏöîÏ≤≠/ÏùëÎãµÏùÑ Ïù¥ÏßÑÎç∞Ïù¥ÌÑ∞ _ Î∞îÏù¥Ìä∏ ÌòïÏãùÏúºÎ°ú Ïù∏ÏΩîÎî©ÎêòÏñ¥ Ï†ÑÏÜ° )
        // mockMvc.perform().andDo().andExpect()
        // andDo() : ÌÖåÏä§Ìä∏ Í≤∞Í≥º Î∞è ÏöîÏ≤≠Í≥º ÏùëÎãµ Ï†ïÎ≥¥Î•º Ï∂úÎ†•
        // andExpect() : HTTP ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìúÍ∞Ä 200 OK Ïù∏ÏßÄÎ•º ÌôïÏù∏
        String account = "userId";
        String userName = "eunjeong";
        String email = "dmswjdans";
        String password = "1111";
        UserJoinRequest request = new UserJoinRequest(account, userName, email, password);

        mockMvc.perform(
            post("/api/user/join")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsBytes(request)) // üåà JSON ÏßÅÎ†¨Ìôî Ïó≠ÏßÅÎ†¨Ìôî Î≥ÄÌôòÏãú Í∏∞Î≥∏ÏÉùÏÑ±Ïûê(Îß§Í∞úÎ≥ÄÏàò ÏóÜÎäî) ÌïÑÏöî -> UserJoinRequest ÌÅ¥ÎûòÏä§Ïóê @NoArgsConstructor ÌïÑÏöî
            )
            .andDo(print())
            .andExpect(status().isOk());
    }

    @Test
    @DisplayName("ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®")
    void join_fail() throws Exception {
        String account = "userId";
        String userName = "eunjeong";
        String email = "dmswjdans";
        String password = "1111";

        when(userService.join(any()))
            .thenThrow(new AppException(ErrorCode.USERNAME_DUPLICATED, ""));

        mockMvc.perform(
            post("/api/user/join")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsBytes(new UserJoinRequest(account, userName, email, password)))
            )
            .andDo(print())
            .andExpect(status().isConflict());
    }

    @Test
    @DisplayName("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ")
    void login_success() throws Exception {
        String account = "userId";
        String password = "1111";

//        when(userService.login(any()))
//                .thenReturn("token");

        mockMvc.perform(post("/api/user/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsBytes(new UserLoginRequest(account, password)))
        )
                .andDo(print())
                .andExpect(status().isOk());

    }

    @Test
    @DisplayName("Î°úÍ∑∏Ïù∏ Ïã§Ìå® ")
    void login_fail() throws Exception {
        String account = "userId";
        String password = "1111";

//        when(userService.login(any()))
//                .thenThrow(new AppException(ErrorCode.USERNAME_NOT_FOUND, ""));

        mockMvc.perform(post("/api/user/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsBytes(new UserLoginRequest(account, password)))
                )
                .andDo(print())
                .andExpect(status().isNotFound());
    }


}
