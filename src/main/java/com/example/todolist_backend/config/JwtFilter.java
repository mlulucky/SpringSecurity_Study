package com.example.todolist_backend.config;

import com.example.todolist_backend.domain.User;
import com.example.todolist_backend.service.TokenProvider;
import com.example.todolist_backend.service.UserService;
import io.jsonwebtoken.ExpiredJwtException;
import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.List;

@RequiredArgsConstructor
@Component
public class JwtFilter extends OncePerRequestFilter { // ÌÜ†ÌÅ∞Ïù¥ ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨

    // Request Í∞Ä Îì§Ïñ¥ÏôîÏùÑ Îïå Request Header Ïùò Authorization ÌïÑÎìúÏùò Bearer Token ÏùÑ Í∞ÄÏ†∏Ïò¥
    // Í∞ÄÏ†∏Ïò® ÌÜ†ÌÅ∞ÏùÑ Í≤ÄÏ¶ùÌïòÍ≥† Í≤ÄÏ¶ù Í≤∞Í≥ºÎ•º SecurityContext Ïóê Ï∂îÍ∞Ä
    private final TokenProvider tokenProvider;

    // üåà doFilterInternal - jwt Í∂åÌïú Î∂ÄÏó¨
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {

        try{
            String accessToken = parseBearerToken(request);
            if(accessToken !=null && !accessToken.equalsIgnoreCase("null")) { // ÌÜ†ÌÅ∞Ïù¥ ÏûàÏúºÎ©¥
                String userId = tokenProvider.validate(accessToken);
                // SecurityContext Ïóê Ï∂îÍ∞ÄÌï† Í∞ùÏ≤¥ //  ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Í∞ùÏ≤¥Î•º ÏÉùÏÑ± (ÏÇ¨Ïö©ÏûêÏãùÎ≥ÑÏ†ïÎ≥¥, Ìå®Ïä§ÏõåÎìúÏ†ïÎ≥¥, ÏÇ¨Ïö©Ïûê Í∂åÌïúÏ†ïÎ≥¥)
                AbstractAuthenticationToken authenticationToken = createAuthenticationToken(userId,  accessToken, request);
                // SecurityContext Ïóê AbstractAuthenticationToken Í∞ùÏ≤¥Î•º Ï∂îÍ∞ÄÌï¥ÏÑú Ìï¥Îãπ Thread Í∞Ä ÏßÄÏÜçÏ†ÅÏúºÎ°ú Ïù∏Ï¶ù Ï†ïÎ≥¥Î•º Í∞ÄÏßàÏàò ÏûàÎèÑÎ°ù Ìï¥Ï§å
                SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
                securityContext.setAuthentication(authenticationToken);
                SecurityContextHolder.setContext(securityContext);
            }
        } catch (ExpiredJwtException e) {
            reissueAccessToken(request, response, e);
        } catch (Exception e) {
            request.setAttribute("exception", e);
        }
        filterChain.doFilter(request, response); // request Í∞Ä Ïù∏Ï¶ùÏù¥ ÎêòÎ©¥ response Î•º ÏùëÎãµ
    }

    // Request Header Ïùò Authorization ÌïÑÎìúÏùò Bearer Token ÏùÑ Í∞ÄÏ†∏Ïò§Îäî Î©îÏÑúÎìú
    // private String parseBearerToken(HttpServletRequest request, String headerName) { // http header Ïùò ÌÜ†ÌÅ∞ÏùÑ Í∞ÄÏ†∏Ïò§Í∏∞
     private String parseBearerToken(HttpServletRequest request) { // http header Ïùò ÌÜ†ÌÅ∞ÏùÑ Í∞ÄÏ†∏Ïò§Í∏∞

       String bearerToken = request.getHeader("Authorization");
        // hasText : ÎπàÍ∞í || null Ïù∏ Í≤ΩÏö∞ false Î∞òÌôò
        if(StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7); // substring(n) : Ïù∏Îç±Ïä§Í∞Ä n Ïù¥ÌõÑÏù∏ Í∞í Î∞òÌôò
        }
        return null;
    }

    // Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ + ÎßåÎ£åÎêú Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ -> Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Î∞úÍ∏â + ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù => ÏùëÎãµÌó§ÎçîÏóê ÏÉàÎ°úÏö¥ Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Î∞òÌôò
    private void reissueAccessToken(HttpServletRequest request, HttpServletResponse response, Exception exception) {
        try{
            String refreshToken = parseBearerToken(request);
            if(refreshToken == null) {
                throw exception;
            }
            String oldAccessToken = parseBearerToken(request);
            tokenProvider.validateRefreshToken(refreshToken, oldAccessToken);
            String newAccessToken = tokenProvider.recreateAccessToken(oldAccessToken);
            String account = tokenProvider.validate(newAccessToken);
            AbstractAuthenticationToken authenticationToken = createAuthenticationToken(account, newAccessToken, request);

            SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
            securityContext.setAuthentication(authenticationToken);
            SecurityContextHolder.setContext(securityContext);

            response.setHeader("New-Access-Token", newAccessToken);
        } catch (Exception e) {
            request.setAttribute("exception", e);
        }

    }

    private  AbstractAuthenticationToken createAuthenticationToken(String account, String token, HttpServletRequest request) {
        AbstractAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(account, token, AuthorityUtils.NO_AUTHORITIES);
        authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
        return authenticationToken;
    }


}